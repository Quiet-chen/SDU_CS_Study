// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2019 18:32:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    test4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module test4_vlg_sample_tst(
	C_clk,
	CLR,
	Open,
	S_clk,
	sampler_tx
);
input  C_clk;
input  CLR;
input  Open;
input  S_clk;
output sampler_tx;

reg sample;
time current_time;
always @(C_clk or CLR or Open or S_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module test4_vlg_check_tst (
	CPIR,
	M,
	MA,
	op,
	r/w,
	r/w_clock,
	RAM_ADR,
	RAM_DATA,
	RAM_OUT,
	S0,
	S1,
	S2,
	S3,
	S4,
	S7,
	T1,
	T2,
	T3,
	T4,
	w0,
	w1,
	w2,
	w3,
	ZQ1,
	ZQ2,
	sampler_rx
);
input  CPIR;
input  M;
input  MA;
input [3:0] op;
input  r/w;
input  r/w_clock;
input [7:0] RAM_ADR;
input [7:0] RAM_DATA;
input [7:0] RAM_OUT;
input  S0;
input  S1;
input  S2;
input  S3;
input  S4;
input  S7;
input  T1;
input  T2;
input  T3;
input  T4;
input  w0;
input  w1;
input  w2;
input  w3;
input  ZQ1;
input  ZQ2;
input sampler_rx;

reg  CPIR_expected;
reg  M_expected;
reg  MA_expected;
reg [3:0] op_expected;
reg  r/w_expected;
reg  r/w_clock_expected;
reg [7:0] RAM_ADR_expected;
reg [7:0] RAM_DATA_expected;
reg [7:0] RAM_OUT_expected;
reg  S0_expected;
reg  S1_expected;
reg  S2_expected;
reg  S3_expected;
reg  S4_expected;
reg  S7_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  w0_expected;
reg  w1_expected;
reg  w2_expected;
reg  w3_expected;
reg  ZQ1_expected;
reg  ZQ2_expected;

reg  CPIR_prev;
reg  M_prev;
reg  MA_prev;
reg [3:0] op_prev;
reg  r/w_prev;
reg  r/w_clock_prev;
reg [7:0] RAM_ADR_prev;
reg [7:0] RAM_DATA_prev;
reg [7:0] RAM_OUT_prev;
reg  S0_prev;
reg  S1_prev;
reg  S2_prev;
reg  S3_prev;
reg  S4_prev;
reg  S7_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  w0_prev;
reg  w1_prev;
reg  w2_prev;
reg  w3_prev;
reg  ZQ1_prev;
reg  ZQ2_prev;

reg  CPIR_expected_prev;
reg  M_expected_prev;
reg  MA_expected_prev;
reg [3:0] op_expected_prev;
reg  r/w_expected_prev;
reg  r/w_clock_expected_prev;
reg [7:0] RAM_ADR_expected_prev;
reg [7:0] RAM_DATA_expected_prev;
reg [7:0] RAM_OUT_expected_prev;
reg  S0_expected_prev;
reg  S1_expected_prev;
reg  S2_expected_prev;
reg  S3_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  w0_expected_prev;
reg  w1_expected_prev;
reg  w2_expected_prev;
reg  w3_expected_prev;
reg  ZQ1_expected_prev;
reg  ZQ2_expected_prev;

reg  last_CPIR_exp;
reg  last_M_exp;
reg  last_MA_exp;
reg [3:0] last_op_exp;
reg  last_r/w_exp;
reg  last_r/w_clock_exp;
reg [7:0] last_RAM_ADR_exp;
reg [7:0] last_RAM_DATA_exp;
reg [7:0] last_RAM_OUT_exp;
reg  last_S0_exp;
reg  last_S1_exp;
reg  last_S2_exp;
reg  last_S3_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_w0_exp;
reg  last_w1_exp;
reg  last_w2_exp;
reg  last_w3_exp;
reg  last_ZQ1_exp;
reg  last_ZQ2_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:25] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 25'b1;
end

// update real /o prevs

always @(trigger)
begin
	CPIR_prev = CPIR;
	M_prev = M;
	MA_prev = MA;
	op_prev = op;
	r/w_prev = r/w;
	r/w_clock_prev = r/w_clock;
	RAM_ADR_prev = RAM_ADR;
	RAM_DATA_prev = RAM_DATA;
	RAM_OUT_prev = RAM_OUT;
	S0_prev = S0;
	S1_prev = S1;
	S2_prev = S2;
	S3_prev = S3;
	S4_prev = S4;
	S7_prev = S7;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	w0_prev = w0;
	w1_prev = w1;
	w2_prev = w2;
	w3_prev = w3;
	ZQ1_prev = ZQ1;
	ZQ2_prev = ZQ2;
end

// update expected /o prevs

always @(trigger)
begin
	CPIR_expected_prev = CPIR_expected;
	M_expected_prev = M_expected;
	MA_expected_prev = MA_expected;
	op_expected_prev = op_expected;
	r/w_expected_prev = r/w_expected;
	r/w_clock_expected_prev = r/w_clock_expected;
	RAM_ADR_expected_prev = RAM_ADR_expected;
	RAM_DATA_expected_prev = RAM_DATA_expected;
	RAM_OUT_expected_prev = RAM_OUT_expected;
	S0_expected_prev = S0_expected;
	S1_expected_prev = S1_expected;
	S2_expected_prev = S2_expected;
	S3_expected_prev = S3_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	w0_expected_prev = w0_expected;
	w1_expected_prev = w1_expected;
	w2_expected_prev = w2_expected;
	w3_expected_prev = w3_expected;
	ZQ1_expected_prev = ZQ1_expected;
	ZQ2_expected_prev = ZQ2_expected;
end


// expected op[ 3 ]
initial
begin
	op_expected[3] = 1'bX;
end 
// expected op[ 2 ]
initial
begin
	op_expected[2] = 1'bX;
end 
// expected op[ 1 ]
initial
begin
	op_expected[1] = 1'bX;
end 
// expected op[ 0 ]
initial
begin
	op_expected[0] = 1'bX;
end 

// expected w3
initial
begin
	w3_expected = 1'bX;
end 

// expected w2
initial
begin
	w2_expected = 1'bX;
end 

// expected w1
initial
begin
	w1_expected = 1'bX;
end 

// expected w0
initial
begin
	w0_expected = 1'bX;
end 
// expected RAM_ADR[ 7 ]
initial
begin
	RAM_ADR_expected[7] = 1'bX;
end 
// expected RAM_ADR[ 6 ]
initial
begin
	RAM_ADR_expected[6] = 1'bX;
end 
// expected RAM_ADR[ 5 ]
initial
begin
	RAM_ADR_expected[5] = 1'bX;
end 
// expected RAM_ADR[ 4 ]
initial
begin
	RAM_ADR_expected[4] = 1'bX;
end 
// expected RAM_ADR[ 3 ]
initial
begin
	RAM_ADR_expected[3] = 1'bX;
end 
// expected RAM_ADR[ 2 ]
initial
begin
	RAM_ADR_expected[2] = 1'bX;
end 
// expected RAM_ADR[ 1 ]
initial
begin
	RAM_ADR_expected[1] = 1'bX;
end 
// expected RAM_ADR[ 0 ]
initial
begin
	RAM_ADR_expected[0] = 1'bX;
end 
// expected RAM_DATA[ 7 ]
initial
begin
	RAM_DATA_expected[7] = 1'bX;
end 
// expected RAM_DATA[ 6 ]
initial
begin
	RAM_DATA_expected[6] = 1'bX;
end 
// expected RAM_DATA[ 5 ]
initial
begin
	RAM_DATA_expected[5] = 1'bX;
end 
// expected RAM_DATA[ 4 ]
initial
begin
	RAM_DATA_expected[4] = 1'bX;
end 
// expected RAM_DATA[ 3 ]
initial
begin
	RAM_DATA_expected[3] = 1'bX;
end 
// expected RAM_DATA[ 2 ]
initial
begin
	RAM_DATA_expected[2] = 1'bX;
end 
// expected RAM_DATA[ 1 ]
initial
begin
	RAM_DATA_expected[1] = 1'bX;
end 
// expected RAM_DATA[ 0 ]
initial
begin
	RAM_DATA_expected[0] = 1'bX;
end 
// expected RAM_OUT[ 7 ]
initial
begin
	RAM_OUT_expected[7] = 1'bX;
end 
// expected RAM_OUT[ 6 ]
initial
begin
	RAM_OUT_expected[6] = 1'bX;
end 
// expected RAM_OUT[ 5 ]
initial
begin
	RAM_OUT_expected[5] = 1'bX;
end 
// expected RAM_OUT[ 4 ]
initial
begin
	RAM_OUT_expected[4] = 1'bX;
end 
// expected RAM_OUT[ 3 ]
initial
begin
	RAM_OUT_expected[3] = 1'bX;
end 
// expected RAM_OUT[ 2 ]
initial
begin
	RAM_OUT_expected[2] = 1'bX;
end 
// expected RAM_OUT[ 1 ]
initial
begin
	RAM_OUT_expected[1] = 1'bX;
end 
// expected RAM_OUT[ 0 ]
initial
begin
	RAM_OUT_expected[0] = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected ZQ1
initial
begin
	ZQ1_expected = 1'bX;
end 

// expected ZQ2
initial
begin
	ZQ2_expected = 1'bX;
end 

// expected r/w
initial
begin
	r/w_expected = 1'bX;
end 

// expected r/w_clock
initial
begin
	r/w_clock_expected = 1'bX;
end 

// expected CPIR
initial
begin
	CPIR_expected = 1'bX;
end 

// expected MA
initial
begin
	MA_expected = 1'bX;
end 

// expected M
initial
begin
	M_expected = 1'bX;
end 

// expected S3
initial
begin
	S3_expected = 1'bX;
end 

// expected S2
initial
begin
	S2_expected = 1'bX;
end 

// expected S1
initial
begin
	S1_expected = 1'bX;
end 

// expected S0
initial
begin
	S0_expected = 1'bX;
end 
// generate trigger
always @(CPIR_expected or CPIR or M_expected or M or MA_expected or MA or op_expected or op or r/w_expected or r/w or r/w_clock_expected or r/w_clock or RAM_ADR_expected or RAM_ADR or RAM_DATA_expected or RAM_DATA or RAM_OUT_expected or RAM_OUT or S0_expected or S0 or S1_expected or S1 or S2_expected or S2 or S3_expected or S3 or S4_expected or S4 or S7_expected or S7 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or w0_expected or w0 or w1_expected or w1 or w2_expected or w2 or w3_expected or w3 or ZQ1_expected or ZQ1 or ZQ2_expected or ZQ2)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CPIR = %b | expected M = %b | expected MA = %b | expected op = %b | expected r/w = %b | expected r/w_clock = %b | expected RAM_ADR = %b | expected RAM_DATA = %b | expected RAM_OUT = %b | expected S0 = %b | expected S1 = %b | expected S2 = %b | expected S3 = %b | expected S4 = %b | expected S7 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected w0 = %b | expected w1 = %b | expected w2 = %b | expected w3 = %b | expected ZQ1 = %b | expected ZQ2 = %b | ",CPIR_expected_prev,M_expected_prev,MA_expected_prev,op_expected_prev,r/w_expected_prev,r/w_clock_expected_prev,RAM_ADR_expected_prev,RAM_DATA_expected_prev,RAM_OUT_expected_prev,S0_expected_prev,S1_expected_prev,S2_expected_prev,S3_expected_prev,S4_expected_prev,S7_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,w0_expected_prev,w1_expected_prev,w2_expected_prev,w3_expected_prev,ZQ1_expected_prev,ZQ2_expected_prev);
	$display("| real CPIR = %b | real M = %b | real MA = %b | real op = %b | real r/w = %b | real r/w_clock = %b | real RAM_ADR = %b | real RAM_DATA = %b | real RAM_OUT = %b | real S0 = %b | real S1 = %b | real S2 = %b | real S3 = %b | real S4 = %b | real S7 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real w0 = %b | real w1 = %b | real w2 = %b | real w3 = %b | real ZQ1 = %b | real ZQ2 = %b | ",CPIR_prev,M_prev,MA_prev,op_prev,r/w_prev,r/w_clock_prev,RAM_ADR_prev,RAM_DATA_prev,RAM_OUT_prev,S0_prev,S1_prev,S2_prev,S3_prev,S4_prev,S7_prev,T1_prev,T2_prev,T3_prev,T4_prev,w0_prev,w1_prev,w2_prev,w3_prev,ZQ1_prev,ZQ2_prev);
`endif
	if (
		( CPIR_expected_prev !== 1'bx ) && ( CPIR_prev !== CPIR_expected_prev )
		&& ((CPIR_expected_prev !== last_CPIR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CPIR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CPIR_expected_prev);
		$display ("     Real value = %b", CPIR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CPIR_exp = CPIR_expected_prev;
	end
	if (
		( M_expected_prev !== 1'bx ) && ( M_prev !== M_expected_prev )
		&& ((M_expected_prev !== last_M_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_M_exp = M_expected_prev;
	end
	if (
		( MA_expected_prev !== 1'bx ) && ( MA_prev !== MA_expected_prev )
		&& ((MA_expected_prev !== last_MA_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MA_expected_prev);
		$display ("     Real value = %b", MA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_MA_exp = MA_expected_prev;
	end
	if (
		( op_expected_prev[0] !== 1'bx ) && ( op_prev[0] !== op_expected_prev[0] )
		&& ((op_expected_prev[0] !== last_op_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[0] = op_expected_prev[0];
	end
	if (
		( op_expected_prev[1] !== 1'bx ) && ( op_prev[1] !== op_expected_prev[1] )
		&& ((op_expected_prev[1] !== last_op_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[1] = op_expected_prev[1];
	end
	if (
		( op_expected_prev[2] !== 1'bx ) && ( op_prev[2] !== op_expected_prev[2] )
		&& ((op_expected_prev[2] !== last_op_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[2] = op_expected_prev[2];
	end
	if (
		( op_expected_prev[3] !== 1'bx ) && ( op_prev[3] !== op_expected_prev[3] )
		&& ((op_expected_prev[3] !== last_op_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_expected_prev);
		$display ("     Real value = %b", op_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_op_exp[3] = op_expected_prev[3];
	end
	if (
		( r/w_expected_prev !== 1'bx ) && ( r/w_prev !== r/w_expected_prev )
		&& ((r/w_expected_prev !== last_r/w_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r/w :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r/w_expected_prev);
		$display ("     Real value = %b", r/w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_r/w_exp = r/w_expected_prev;
	end
	if (
		( r/w_clock_expected_prev !== 1'bx ) && ( r/w_clock_prev !== r/w_clock_expected_prev )
		&& ((r/w_clock_expected_prev !== last_r/w_clock_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port r/w_clock :: @time = %t",  $realtime);
		$display ("     Expected value = %b", r/w_clock_expected_prev);
		$display ("     Real value = %b", r/w_clock_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_r/w_clock_exp = r/w_clock_expected_prev;
	end
	if (
		( RAM_ADR_expected_prev[0] !== 1'bx ) && ( RAM_ADR_prev[0] !== RAM_ADR_expected_prev[0] )
		&& ((RAM_ADR_expected_prev[0] !== last_RAM_ADR_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[0] = RAM_ADR_expected_prev[0];
	end
	if (
		( RAM_ADR_expected_prev[1] !== 1'bx ) && ( RAM_ADR_prev[1] !== RAM_ADR_expected_prev[1] )
		&& ((RAM_ADR_expected_prev[1] !== last_RAM_ADR_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[1] = RAM_ADR_expected_prev[1];
	end
	if (
		( RAM_ADR_expected_prev[2] !== 1'bx ) && ( RAM_ADR_prev[2] !== RAM_ADR_expected_prev[2] )
		&& ((RAM_ADR_expected_prev[2] !== last_RAM_ADR_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[2] = RAM_ADR_expected_prev[2];
	end
	if (
		( RAM_ADR_expected_prev[3] !== 1'bx ) && ( RAM_ADR_prev[3] !== RAM_ADR_expected_prev[3] )
		&& ((RAM_ADR_expected_prev[3] !== last_RAM_ADR_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[3] = RAM_ADR_expected_prev[3];
	end
	if (
		( RAM_ADR_expected_prev[4] !== 1'bx ) && ( RAM_ADR_prev[4] !== RAM_ADR_expected_prev[4] )
		&& ((RAM_ADR_expected_prev[4] !== last_RAM_ADR_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[4] = RAM_ADR_expected_prev[4];
	end
	if (
		( RAM_ADR_expected_prev[5] !== 1'bx ) && ( RAM_ADR_prev[5] !== RAM_ADR_expected_prev[5] )
		&& ((RAM_ADR_expected_prev[5] !== last_RAM_ADR_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[5] = RAM_ADR_expected_prev[5];
	end
	if (
		( RAM_ADR_expected_prev[6] !== 1'bx ) && ( RAM_ADR_prev[6] !== RAM_ADR_expected_prev[6] )
		&& ((RAM_ADR_expected_prev[6] !== last_RAM_ADR_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[6] = RAM_ADR_expected_prev[6];
	end
	if (
		( RAM_ADR_expected_prev[7] !== 1'bx ) && ( RAM_ADR_prev[7] !== RAM_ADR_expected_prev[7] )
		&& ((RAM_ADR_expected_prev[7] !== last_RAM_ADR_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_ADR_exp[7] = RAM_ADR_expected_prev[7];
	end
	if (
		( RAM_DATA_expected_prev[0] !== 1'bx ) && ( RAM_DATA_prev[0] !== RAM_DATA_expected_prev[0] )
		&& ((RAM_DATA_expected_prev[0] !== last_RAM_DATA_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[0] = RAM_DATA_expected_prev[0];
	end
	if (
		( RAM_DATA_expected_prev[1] !== 1'bx ) && ( RAM_DATA_prev[1] !== RAM_DATA_expected_prev[1] )
		&& ((RAM_DATA_expected_prev[1] !== last_RAM_DATA_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[1] = RAM_DATA_expected_prev[1];
	end
	if (
		( RAM_DATA_expected_prev[2] !== 1'bx ) && ( RAM_DATA_prev[2] !== RAM_DATA_expected_prev[2] )
		&& ((RAM_DATA_expected_prev[2] !== last_RAM_DATA_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[2] = RAM_DATA_expected_prev[2];
	end
	if (
		( RAM_DATA_expected_prev[3] !== 1'bx ) && ( RAM_DATA_prev[3] !== RAM_DATA_expected_prev[3] )
		&& ((RAM_DATA_expected_prev[3] !== last_RAM_DATA_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[3] = RAM_DATA_expected_prev[3];
	end
	if (
		( RAM_DATA_expected_prev[4] !== 1'bx ) && ( RAM_DATA_prev[4] !== RAM_DATA_expected_prev[4] )
		&& ((RAM_DATA_expected_prev[4] !== last_RAM_DATA_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[4] = RAM_DATA_expected_prev[4];
	end
	if (
		( RAM_DATA_expected_prev[5] !== 1'bx ) && ( RAM_DATA_prev[5] !== RAM_DATA_expected_prev[5] )
		&& ((RAM_DATA_expected_prev[5] !== last_RAM_DATA_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[5] = RAM_DATA_expected_prev[5];
	end
	if (
		( RAM_DATA_expected_prev[6] !== 1'bx ) && ( RAM_DATA_prev[6] !== RAM_DATA_expected_prev[6] )
		&& ((RAM_DATA_expected_prev[6] !== last_RAM_DATA_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[6] = RAM_DATA_expected_prev[6];
	end
	if (
		( RAM_DATA_expected_prev[7] !== 1'bx ) && ( RAM_DATA_prev[7] !== RAM_DATA_expected_prev[7] )
		&& ((RAM_DATA_expected_prev[7] !== last_RAM_DATA_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RAM_DATA_exp[7] = RAM_DATA_expected_prev[7];
	end
	if (
		( RAM_OUT_expected_prev[0] !== 1'bx ) && ( RAM_OUT_prev[0] !== RAM_OUT_expected_prev[0] )
		&& ((RAM_OUT_expected_prev[0] !== last_RAM_OUT_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[0] = RAM_OUT_expected_prev[0];
	end
	if (
		( RAM_OUT_expected_prev[1] !== 1'bx ) && ( RAM_OUT_prev[1] !== RAM_OUT_expected_prev[1] )
		&& ((RAM_OUT_expected_prev[1] !== last_RAM_OUT_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[1] = RAM_OUT_expected_prev[1];
	end
	if (
		( RAM_OUT_expected_prev[2] !== 1'bx ) && ( RAM_OUT_prev[2] !== RAM_OUT_expected_prev[2] )
		&& ((RAM_OUT_expected_prev[2] !== last_RAM_OUT_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[2] = RAM_OUT_expected_prev[2];
	end
	if (
		( RAM_OUT_expected_prev[3] !== 1'bx ) && ( RAM_OUT_prev[3] !== RAM_OUT_expected_prev[3] )
		&& ((RAM_OUT_expected_prev[3] !== last_RAM_OUT_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[3] = RAM_OUT_expected_prev[3];
	end
	if (
		( RAM_OUT_expected_prev[4] !== 1'bx ) && ( RAM_OUT_prev[4] !== RAM_OUT_expected_prev[4] )
		&& ((RAM_OUT_expected_prev[4] !== last_RAM_OUT_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[4] = RAM_OUT_expected_prev[4];
	end
	if (
		( RAM_OUT_expected_prev[5] !== 1'bx ) && ( RAM_OUT_prev[5] !== RAM_OUT_expected_prev[5] )
		&& ((RAM_OUT_expected_prev[5] !== last_RAM_OUT_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[5] = RAM_OUT_expected_prev[5];
	end
	if (
		( RAM_OUT_expected_prev[6] !== 1'bx ) && ( RAM_OUT_prev[6] !== RAM_OUT_expected_prev[6] )
		&& ((RAM_OUT_expected_prev[6] !== last_RAM_OUT_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[6] = RAM_OUT_expected_prev[6];
	end
	if (
		( RAM_OUT_expected_prev[7] !== 1'bx ) && ( RAM_OUT_prev[7] !== RAM_OUT_expected_prev[7] )
		&& ((RAM_OUT_expected_prev[7] !== last_RAM_OUT_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RAM_OUT_exp[7] = RAM_OUT_expected_prev[7];
	end
	if (
		( S0_expected_prev !== 1'bx ) && ( S0_prev !== S0_expected_prev )
		&& ((S0_expected_prev !== last_S0_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S0_expected_prev);
		$display ("     Real value = %b", S0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_S0_exp = S0_expected_prev;
	end
	if (
		( S1_expected_prev !== 1'bx ) && ( S1_prev !== S1_expected_prev )
		&& ((S1_expected_prev !== last_S1_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S1_expected_prev);
		$display ("     Real value = %b", S1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_S1_exp = S1_expected_prev;
	end
	if (
		( S2_expected_prev !== 1'bx ) && ( S2_prev !== S2_expected_prev )
		&& ((S2_expected_prev !== last_S2_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S2_expected_prev);
		$display ("     Real value = %b", S2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_S2_exp = S2_expected_prev;
	end
	if (
		( S3_expected_prev !== 1'bx ) && ( S3_prev !== S3_expected_prev )
		&& ((S3_expected_prev !== last_S3_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port S3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", S3_expected_prev);
		$display ("     Real value = %b", S3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_S3_exp = S3_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( w0_expected_prev !== 1'bx ) && ( w0_prev !== w0_expected_prev )
		&& ((w0_expected_prev !== last_w0_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_w0_exp = w0_expected_prev;
	end
	if (
		( w1_expected_prev !== 1'bx ) && ( w1_prev !== w1_expected_prev )
		&& ((w1_expected_prev !== last_w1_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_w1_exp = w1_expected_prev;
	end
	if (
		( w2_expected_prev !== 1'bx ) && ( w2_prev !== w2_expected_prev )
		&& ((w2_expected_prev !== last_w2_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_w2_exp = w2_expected_prev;
	end
	if (
		( w3_expected_prev !== 1'bx ) && ( w3_prev !== w3_expected_prev )
		&& ((w3_expected_prev !== last_w3_exp) ||
			on_first_change[23])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[23] = 1'b0;
		last_w3_exp = w3_expected_prev;
	end
	if (
		( ZQ1_expected_prev !== 1'bx ) && ( ZQ1_prev !== ZQ1_expected_prev )
		&& ((ZQ1_expected_prev !== last_ZQ1_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZQ1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZQ1_expected_prev);
		$display ("     Real value = %b", ZQ1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_ZQ1_exp = ZQ1_expected_prev;
	end
	if (
		( ZQ2_expected_prev !== 1'bx ) && ( ZQ2_prev !== ZQ2_expected_prev )
		&& ((ZQ2_expected_prev !== last_ZQ2_exp) ||
			on_first_change[25])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ZQ2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ZQ2_expected_prev);
		$display ("     Real value = %b", ZQ2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[25] = 1'b0;
		last_ZQ2_exp = ZQ2_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module test4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C_clk;
reg CLR;
reg Open;
reg S_clk;
// wires                                               
wire CPIR;
wire M;
wire MA;
wire [3:0] op;
wire r/w;
wire r/w_clock;
wire [7:0] RAM_ADR;
wire [7:0] RAM_DATA;
wire [7:0] RAM_OUT;
wire S0;
wire S1;
wire S2;
wire S3;
wire S4;
wire S7;
wire T1;
wire T2;
wire T3;
wire T4;
wire w0;
wire w1;
wire w2;
wire w3;
wire ZQ1;
wire ZQ2;

wire sampler;                             

// assign statements (if any)                          
test4 i1 (
// port map - connection between master ports and signals/registers   
	.C_clk(C_clk),
	.CLR(CLR),
	.CPIR(CPIR),
	.M(M),
	.MA(MA),
	.op(op),
	.Open(Open),
	.\r/w (r/w),
	.\r/w_clock (r/w_clock),
	.RAM_ADR(RAM_ADR),
	.RAM_DATA(RAM_DATA),
	.RAM_OUT(RAM_OUT),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S7(S7),
	.S_clk(S_clk),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.ZQ1(ZQ1),
	.ZQ2(ZQ2)
);

// CLR
initial
begin
	CLR = 1'b1;
end 

// Open
initial
begin
	Open = 1'b1;
end 

// S_clk
initial
begin
	S_clk = 1'b0;
	S_clk = #10000 1'b1;
end 

// C_clk
always
begin
	C_clk = 1'b0;
	C_clk = #5000 1'b1;
	#5000;
end 

test4_vlg_sample_tst tb_sample (
	.C_clk(C_clk),
	.CLR(CLR),
	.Open(Open),
	.S_clk(S_clk),
	.sampler_tx(sampler)
);

test4_vlg_check_tst tb_out(
	.CPIR(CPIR),
	.M(M),
	.MA(MA),
	.op(op),
	.r/w(r/w),
	.r/w_clock(r/w_clock),
	.RAM_ADR(RAM_ADR),
	.RAM_DATA(RAM_DATA),
	.RAM_OUT(RAM_OUT),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.S3(S3),
	.S4(S4),
	.S7(S7),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.ZQ1(ZQ1),
	.ZQ2(ZQ2),
	.sampler_rx(sampler)
);
endmodule

