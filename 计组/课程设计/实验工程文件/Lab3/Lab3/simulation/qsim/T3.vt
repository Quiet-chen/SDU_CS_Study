// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2019 19:59:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    T3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module T3_vlg_sample_tst(
	C_clk,
	CLR,
	Open,
	S_clk,
	sampler_tx
);
input  C_clk;
input  CLR;
input  Open;
input  S_clk;
output sampler_tx;

reg sample;
time current_time;
always @(C_clk or CLR or Open or S_clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module T3_vlg_check_tst (
	flag,
	MJP,
	R_CLK,
	RAM_ADR,
	RAM_CLK,
	RAM_DATA,
	RAM_OUT,
	ROM_ADDR,
	ROM_CLK,
	ROM_Q,
	uPC_CLK,
	YJP,
	sampler_rx
);
input  flag;
input  MJP;
input  R_CLK;
input [7:0] RAM_ADR;
input  RAM_CLK;
input [7:0] RAM_DATA;
input [7:0] RAM_OUT;
input [7:0] ROM_ADDR;
input  ROM_CLK;
input [31:0] ROM_Q;
input  uPC_CLK;
input  YJP;
input sampler_rx;

reg  flag_expected;
reg  MJP_expected;
reg  R_CLK_expected;
reg [7:0] RAM_ADR_expected;
reg  RAM_CLK_expected;
reg [7:0] RAM_DATA_expected;
reg [7:0] RAM_OUT_expected;
reg [7:0] ROM_ADDR_expected;
reg  ROM_CLK_expected;
reg [31:0] ROM_Q_expected;
reg  uPC_CLK_expected;
reg  YJP_expected;

reg  flag_prev;
reg  MJP_prev;
reg  R_CLK_prev;
reg [7:0] RAM_ADR_prev;
reg  RAM_CLK_prev;
reg [7:0] RAM_DATA_prev;
reg [7:0] RAM_OUT_prev;
reg [7:0] ROM_ADDR_prev;
reg  ROM_CLK_prev;
reg [31:0] ROM_Q_prev;
reg  uPC_CLK_prev;
reg  YJP_prev;

reg  flag_expected_prev;
reg  MJP_expected_prev;
reg  R_CLK_expected_prev;
reg [7:0] RAM_ADR_expected_prev;
reg  RAM_CLK_expected_prev;
reg [7:0] RAM_DATA_expected_prev;
reg [7:0] RAM_OUT_expected_prev;
reg [7:0] ROM_ADDR_expected_prev;
reg  ROM_CLK_expected_prev;
reg [31:0] ROM_Q_expected_prev;
reg  uPC_CLK_expected_prev;
reg  YJP_expected_prev;

reg  last_flag_exp;
reg  last_MJP_exp;
reg  last_R_CLK_exp;
reg [7:0] last_RAM_ADR_exp;
reg  last_RAM_CLK_exp;
reg [7:0] last_RAM_DATA_exp;
reg [7:0] last_RAM_OUT_exp;
reg [7:0] last_ROM_ADDR_exp;
reg  last_ROM_CLK_exp;
reg [31:0] last_ROM_Q_exp;
reg  last_uPC_CLK_exp;
reg  last_YJP_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:12] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 12'b1;
end

// update real /o prevs

always @(trigger)
begin
	flag_prev = flag;
	MJP_prev = MJP;
	R_CLK_prev = R_CLK;
	RAM_ADR_prev = RAM_ADR;
	RAM_CLK_prev = RAM_CLK;
	RAM_DATA_prev = RAM_DATA;
	RAM_OUT_prev = RAM_OUT;
	ROM_ADDR_prev = ROM_ADDR;
	ROM_CLK_prev = ROM_CLK;
	ROM_Q_prev = ROM_Q;
	uPC_CLK_prev = uPC_CLK;
	YJP_prev = YJP;
end

// update expected /o prevs

always @(trigger)
begin
	flag_expected_prev = flag_expected;
	MJP_expected_prev = MJP_expected;
	R_CLK_expected_prev = R_CLK_expected;
	RAM_ADR_expected_prev = RAM_ADR_expected;
	RAM_CLK_expected_prev = RAM_CLK_expected;
	RAM_DATA_expected_prev = RAM_DATA_expected;
	RAM_OUT_expected_prev = RAM_OUT_expected;
	ROM_ADDR_expected_prev = ROM_ADDR_expected;
	ROM_CLK_expected_prev = ROM_CLK_expected;
	ROM_Q_expected_prev = ROM_Q_expected;
	uPC_CLK_expected_prev = uPC_CLK_expected;
	YJP_expected_prev = YJP_expected;
end


// expected RAM_ADR[ 7 ]
initial
begin
	RAM_ADR_expected[7] = 1'bX;
end 
// expected RAM_ADR[ 6 ]
initial
begin
	RAM_ADR_expected[6] = 1'bX;
end 
// expected RAM_ADR[ 5 ]
initial
begin
	RAM_ADR_expected[5] = 1'bX;
end 
// expected RAM_ADR[ 4 ]
initial
begin
	RAM_ADR_expected[4] = 1'bX;
end 
// expected RAM_ADR[ 3 ]
initial
begin
	RAM_ADR_expected[3] = 1'bX;
end 
// expected RAM_ADR[ 2 ]
initial
begin
	RAM_ADR_expected[2] = 1'bX;
end 
// expected RAM_ADR[ 1 ]
initial
begin
	RAM_ADR_expected[1] = 1'bX;
end 
// expected RAM_ADR[ 0 ]
initial
begin
	RAM_ADR_expected[0] = 1'bX;
end 
// expected RAM_DATA[ 7 ]
initial
begin
	RAM_DATA_expected[7] = 1'bX;
end 
// expected RAM_DATA[ 6 ]
initial
begin
	RAM_DATA_expected[6] = 1'bX;
end 
// expected RAM_DATA[ 5 ]
initial
begin
	RAM_DATA_expected[5] = 1'bX;
end 
// expected RAM_DATA[ 4 ]
initial
begin
	RAM_DATA_expected[4] = 1'bX;
end 
// expected RAM_DATA[ 3 ]
initial
begin
	RAM_DATA_expected[3] = 1'bX;
end 
// expected RAM_DATA[ 2 ]
initial
begin
	RAM_DATA_expected[2] = 1'bX;
end 
// expected RAM_DATA[ 1 ]
initial
begin
	RAM_DATA_expected[1] = 1'bX;
end 
// expected RAM_DATA[ 0 ]
initial
begin
	RAM_DATA_expected[0] = 1'bX;
end 
// expected RAM_OUT[ 7 ]
initial
begin
	RAM_OUT_expected[7] = 1'bX;
end 
// expected RAM_OUT[ 6 ]
initial
begin
	RAM_OUT_expected[6] = 1'bX;
end 
// expected RAM_OUT[ 5 ]
initial
begin
	RAM_OUT_expected[5] = 1'bX;
end 
// expected RAM_OUT[ 4 ]
initial
begin
	RAM_OUT_expected[4] = 1'bX;
end 
// expected RAM_OUT[ 3 ]
initial
begin
	RAM_OUT_expected[3] = 1'bX;
end 
// expected RAM_OUT[ 2 ]
initial
begin
	RAM_OUT_expected[2] = 1'bX;
end 
// expected RAM_OUT[ 1 ]
initial
begin
	RAM_OUT_expected[1] = 1'bX;
end 
// expected RAM_OUT[ 0 ]
initial
begin
	RAM_OUT_expected[0] = 1'bX;
end 
// expected ROM_ADDR[ 7 ]
initial
begin
	ROM_ADDR_expected[7] = 1'bX;
end 
// expected ROM_ADDR[ 6 ]
initial
begin
	ROM_ADDR_expected[6] = 1'bX;
end 
// expected ROM_ADDR[ 5 ]
initial
begin
	ROM_ADDR_expected[5] = 1'bX;
end 
// expected ROM_ADDR[ 4 ]
initial
begin
	ROM_ADDR_expected[4] = 1'bX;
end 
// expected ROM_ADDR[ 3 ]
initial
begin
	ROM_ADDR_expected[3] = 1'bX;
end 
// expected ROM_ADDR[ 2 ]
initial
begin
	ROM_ADDR_expected[2] = 1'bX;
end 
// expected ROM_ADDR[ 1 ]
initial
begin
	ROM_ADDR_expected[1] = 1'bX;
end 
// expected ROM_ADDR[ 0 ]
initial
begin
	ROM_ADDR_expected[0] = 1'bX;
end 

// expected ROM_Q[31]
initial
begin
	ROM_Q_expected[31] = 1'bX;
end 

// expected ROM_Q[30]
initial
begin
	ROM_Q_expected[30] = 1'bX;
end 

// expected ROM_Q[29]
initial
begin
	ROM_Q_expected[29] = 1'bX;
end 

// expected ROM_Q[28]
initial
begin
	ROM_Q_expected[28] = 1'bX;
end 

// expected ROM_Q[27]
initial
begin
	ROM_Q_expected[27] = 1'bX;
end 

// expected ROM_Q[26]
initial
begin
	ROM_Q_expected[26] = 1'bX;
end 

// expected ROM_Q[25]
initial
begin
	ROM_Q_expected[25] = 1'bX;
end 

// expected ROM_Q[24]
initial
begin
	ROM_Q_expected[24] = 1'bX;
end 

// expected ROM_Q[23]
initial
begin
	ROM_Q_expected[23] = 1'bX;
end 

// expected ROM_Q[22]
initial
begin
	ROM_Q_expected[22] = 1'bX;
end 

// expected ROM_Q[21]
initial
begin
	ROM_Q_expected[21] = 1'bX;
end 

// expected ROM_Q[20]
initial
begin
	ROM_Q_expected[20] = 1'bX;
end 

// expected ROM_Q[19]
initial
begin
	ROM_Q_expected[19] = 1'bX;
end 

// expected ROM_Q[18]
initial
begin
	ROM_Q_expected[18] = 1'bX;
end 

// expected ROM_Q[17]
initial
begin
	ROM_Q_expected[17] = 1'bX;
end 

// expected ROM_Q[16]
initial
begin
	ROM_Q_expected[16] = 1'bX;
end 

// expected ROM_Q[15]
initial
begin
	ROM_Q_expected[15] = 1'bX;
end 

// expected ROM_Q[14]
initial
begin
	ROM_Q_expected[14] = 1'bX;
end 

// expected ROM_Q[13]
initial
begin
	ROM_Q_expected[13] = 1'bX;
end 

// expected ROM_Q[12]
initial
begin
	ROM_Q_expected[12] = 1'bX;
end 

// expected ROM_Q[11]
initial
begin
	ROM_Q_expected[11] = 1'bX;
end 

// expected ROM_Q[10]
initial
begin
	ROM_Q_expected[10] = 1'bX;
end 

// expected ROM_Q[9]
initial
begin
	ROM_Q_expected[9] = 1'bX;
end 

// expected ROM_Q[8]
initial
begin
	ROM_Q_expected[8] = 1'bX;
end 

// expected ROM_Q[7]
initial
begin
	ROM_Q_expected[7] = 1'bX;
end 

// expected ROM_Q[6]
initial
begin
	ROM_Q_expected[6] = 1'bX;
end 

// expected ROM_Q[5]
initial
begin
	ROM_Q_expected[5] = 1'bX;
end 

// expected ROM_Q[4]
initial
begin
	ROM_Q_expected[4] = 1'bX;
end 

// expected ROM_Q[3]
initial
begin
	ROM_Q_expected[3] = 1'bX;
end 

// expected ROM_Q[2]
initial
begin
	ROM_Q_expected[2] = 1'bX;
end 

// expected ROM_Q[1]
initial
begin
	ROM_Q_expected[1] = 1'bX;
end 

// expected ROM_Q[0]
initial
begin
	ROM_Q_expected[0] = 1'bX;
end 

// expected uPC_CLK
initial
begin
	uPC_CLK_expected = 1'bX;
end 

// expected ROM_CLK
initial
begin
	ROM_CLK_expected = 1'bX;
end 

// expected RAM_CLK
initial
begin
	RAM_CLK_expected = 1'bX;
end 

// expected R_CLK
initial
begin
	R_CLK_expected = 1'bX;
end 

// expected flag
initial
begin
	flag_expected = 1'bX;
end 

// expected MJP
initial
begin
	MJP_expected = 1'bX;
end 

// expected YJP
initial
begin
	YJP_expected = 1'bX;
end 
// generate trigger
always @(flag_expected or flag or MJP_expected or MJP or R_CLK_expected or R_CLK or RAM_ADR_expected or RAM_ADR or RAM_CLK_expected or RAM_CLK or RAM_DATA_expected or RAM_DATA or RAM_OUT_expected or RAM_OUT or ROM_ADDR_expected or ROM_ADDR or ROM_CLK_expected or ROM_CLK or ROM_Q_expected or ROM_Q or uPC_CLK_expected or uPC_CLK or YJP_expected or YJP)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected flag = %b | expected MJP = %b | expected R_CLK = %b | expected RAM_ADR = %b | expected RAM_CLK = %b | expected RAM_DATA = %b | expected RAM_OUT = %b | expected ROM_ADDR = %b | expected ROM_CLK = %b | expected ROM_Q = %b | expected uPC_CLK = %b | expected YJP = %b | ",flag_expected_prev,MJP_expected_prev,R_CLK_expected_prev,RAM_ADR_expected_prev,RAM_CLK_expected_prev,RAM_DATA_expected_prev,RAM_OUT_expected_prev,ROM_ADDR_expected_prev,ROM_CLK_expected_prev,ROM_Q_expected_prev,uPC_CLK_expected_prev,YJP_expected_prev);
	$display("| real flag = %b | real MJP = %b | real R_CLK = %b | real RAM_ADR = %b | real RAM_CLK = %b | real RAM_DATA = %b | real RAM_OUT = %b | real ROM_ADDR = %b | real ROM_CLK = %b | real ROM_Q = %b | real uPC_CLK = %b | real YJP = %b | ",flag_prev,MJP_prev,R_CLK_prev,RAM_ADR_prev,RAM_CLK_prev,RAM_DATA_prev,RAM_OUT_prev,ROM_ADDR_prev,ROM_CLK_prev,ROM_Q_prev,uPC_CLK_prev,YJP_prev);
`endif
	if (
		( flag_expected_prev !== 1'bx ) && ( flag_prev !== flag_expected_prev )
		&& ((flag_expected_prev !== last_flag_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port flag :: @time = %t",  $realtime);
		$display ("     Expected value = %b", flag_expected_prev);
		$display ("     Real value = %b", flag_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_flag_exp = flag_expected_prev;
	end
	if (
		( MJP_expected_prev !== 1'bx ) && ( MJP_prev !== MJP_expected_prev )
		&& ((MJP_expected_prev !== last_MJP_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MJP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MJP_expected_prev);
		$display ("     Real value = %b", MJP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_MJP_exp = MJP_expected_prev;
	end
	if (
		( R_CLK_expected_prev !== 1'bx ) && ( R_CLK_prev !== R_CLK_expected_prev )
		&& ((R_CLK_expected_prev !== last_R_CLK_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_CLK_expected_prev);
		$display ("     Real value = %b", R_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_CLK_exp = R_CLK_expected_prev;
	end
	if (
		( RAM_ADR_expected_prev[0] !== 1'bx ) && ( RAM_ADR_prev[0] !== RAM_ADR_expected_prev[0] )
		&& ((RAM_ADR_expected_prev[0] !== last_RAM_ADR_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[0] = RAM_ADR_expected_prev[0];
	end
	if (
		( RAM_ADR_expected_prev[1] !== 1'bx ) && ( RAM_ADR_prev[1] !== RAM_ADR_expected_prev[1] )
		&& ((RAM_ADR_expected_prev[1] !== last_RAM_ADR_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[1] = RAM_ADR_expected_prev[1];
	end
	if (
		( RAM_ADR_expected_prev[2] !== 1'bx ) && ( RAM_ADR_prev[2] !== RAM_ADR_expected_prev[2] )
		&& ((RAM_ADR_expected_prev[2] !== last_RAM_ADR_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[2] = RAM_ADR_expected_prev[2];
	end
	if (
		( RAM_ADR_expected_prev[3] !== 1'bx ) && ( RAM_ADR_prev[3] !== RAM_ADR_expected_prev[3] )
		&& ((RAM_ADR_expected_prev[3] !== last_RAM_ADR_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[3] = RAM_ADR_expected_prev[3];
	end
	if (
		( RAM_ADR_expected_prev[4] !== 1'bx ) && ( RAM_ADR_prev[4] !== RAM_ADR_expected_prev[4] )
		&& ((RAM_ADR_expected_prev[4] !== last_RAM_ADR_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[4] = RAM_ADR_expected_prev[4];
	end
	if (
		( RAM_ADR_expected_prev[5] !== 1'bx ) && ( RAM_ADR_prev[5] !== RAM_ADR_expected_prev[5] )
		&& ((RAM_ADR_expected_prev[5] !== last_RAM_ADR_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[5] = RAM_ADR_expected_prev[5];
	end
	if (
		( RAM_ADR_expected_prev[6] !== 1'bx ) && ( RAM_ADR_prev[6] !== RAM_ADR_expected_prev[6] )
		&& ((RAM_ADR_expected_prev[6] !== last_RAM_ADR_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[6] = RAM_ADR_expected_prev[6];
	end
	if (
		( RAM_ADR_expected_prev[7] !== 1'bx ) && ( RAM_ADR_prev[7] !== RAM_ADR_expected_prev[7] )
		&& ((RAM_ADR_expected_prev[7] !== last_RAM_ADR_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_ADR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_ADR_expected_prev);
		$display ("     Real value = %b", RAM_ADR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_RAM_ADR_exp[7] = RAM_ADR_expected_prev[7];
	end
	if (
		( RAM_CLK_expected_prev !== 1'bx ) && ( RAM_CLK_prev !== RAM_CLK_expected_prev )
		&& ((RAM_CLK_expected_prev !== last_RAM_CLK_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_CLK_expected_prev);
		$display ("     Real value = %b", RAM_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RAM_CLK_exp = RAM_CLK_expected_prev;
	end
	if (
		( RAM_DATA_expected_prev[0] !== 1'bx ) && ( RAM_DATA_prev[0] !== RAM_DATA_expected_prev[0] )
		&& ((RAM_DATA_expected_prev[0] !== last_RAM_DATA_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[0] = RAM_DATA_expected_prev[0];
	end
	if (
		( RAM_DATA_expected_prev[1] !== 1'bx ) && ( RAM_DATA_prev[1] !== RAM_DATA_expected_prev[1] )
		&& ((RAM_DATA_expected_prev[1] !== last_RAM_DATA_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[1] = RAM_DATA_expected_prev[1];
	end
	if (
		( RAM_DATA_expected_prev[2] !== 1'bx ) && ( RAM_DATA_prev[2] !== RAM_DATA_expected_prev[2] )
		&& ((RAM_DATA_expected_prev[2] !== last_RAM_DATA_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[2] = RAM_DATA_expected_prev[2];
	end
	if (
		( RAM_DATA_expected_prev[3] !== 1'bx ) && ( RAM_DATA_prev[3] !== RAM_DATA_expected_prev[3] )
		&& ((RAM_DATA_expected_prev[3] !== last_RAM_DATA_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[3] = RAM_DATA_expected_prev[3];
	end
	if (
		( RAM_DATA_expected_prev[4] !== 1'bx ) && ( RAM_DATA_prev[4] !== RAM_DATA_expected_prev[4] )
		&& ((RAM_DATA_expected_prev[4] !== last_RAM_DATA_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[4] = RAM_DATA_expected_prev[4];
	end
	if (
		( RAM_DATA_expected_prev[5] !== 1'bx ) && ( RAM_DATA_prev[5] !== RAM_DATA_expected_prev[5] )
		&& ((RAM_DATA_expected_prev[5] !== last_RAM_DATA_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[5] = RAM_DATA_expected_prev[5];
	end
	if (
		( RAM_DATA_expected_prev[6] !== 1'bx ) && ( RAM_DATA_prev[6] !== RAM_DATA_expected_prev[6] )
		&& ((RAM_DATA_expected_prev[6] !== last_RAM_DATA_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[6] = RAM_DATA_expected_prev[6];
	end
	if (
		( RAM_DATA_expected_prev[7] !== 1'bx ) && ( RAM_DATA_prev[7] !== RAM_DATA_expected_prev[7] )
		&& ((RAM_DATA_expected_prev[7] !== last_RAM_DATA_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_DATA[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_DATA_expected_prev);
		$display ("     Real value = %b", RAM_DATA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RAM_DATA_exp[7] = RAM_DATA_expected_prev[7];
	end
	if (
		( RAM_OUT_expected_prev[0] !== 1'bx ) && ( RAM_OUT_prev[0] !== RAM_OUT_expected_prev[0] )
		&& ((RAM_OUT_expected_prev[0] !== last_RAM_OUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[0] = RAM_OUT_expected_prev[0];
	end
	if (
		( RAM_OUT_expected_prev[1] !== 1'bx ) && ( RAM_OUT_prev[1] !== RAM_OUT_expected_prev[1] )
		&& ((RAM_OUT_expected_prev[1] !== last_RAM_OUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[1] = RAM_OUT_expected_prev[1];
	end
	if (
		( RAM_OUT_expected_prev[2] !== 1'bx ) && ( RAM_OUT_prev[2] !== RAM_OUT_expected_prev[2] )
		&& ((RAM_OUT_expected_prev[2] !== last_RAM_OUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[2] = RAM_OUT_expected_prev[2];
	end
	if (
		( RAM_OUT_expected_prev[3] !== 1'bx ) && ( RAM_OUT_prev[3] !== RAM_OUT_expected_prev[3] )
		&& ((RAM_OUT_expected_prev[3] !== last_RAM_OUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[3] = RAM_OUT_expected_prev[3];
	end
	if (
		( RAM_OUT_expected_prev[4] !== 1'bx ) && ( RAM_OUT_prev[4] !== RAM_OUT_expected_prev[4] )
		&& ((RAM_OUT_expected_prev[4] !== last_RAM_OUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[4] = RAM_OUT_expected_prev[4];
	end
	if (
		( RAM_OUT_expected_prev[5] !== 1'bx ) && ( RAM_OUT_prev[5] !== RAM_OUT_expected_prev[5] )
		&& ((RAM_OUT_expected_prev[5] !== last_RAM_OUT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[5] = RAM_OUT_expected_prev[5];
	end
	if (
		( RAM_OUT_expected_prev[6] !== 1'bx ) && ( RAM_OUT_prev[6] !== RAM_OUT_expected_prev[6] )
		&& ((RAM_OUT_expected_prev[6] !== last_RAM_OUT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[6] = RAM_OUT_expected_prev[6];
	end
	if (
		( RAM_OUT_expected_prev[7] !== 1'bx ) && ( RAM_OUT_prev[7] !== RAM_OUT_expected_prev[7] )
		&& ((RAM_OUT_expected_prev[7] !== last_RAM_OUT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RAM_OUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RAM_OUT_expected_prev);
		$display ("     Real value = %b", RAM_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RAM_OUT_exp[7] = RAM_OUT_expected_prev[7];
	end
	if (
		( ROM_ADDR_expected_prev[0] !== 1'bx ) && ( ROM_ADDR_prev[0] !== ROM_ADDR_expected_prev[0] )
		&& ((ROM_ADDR_expected_prev[0] !== last_ROM_ADDR_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[0] = ROM_ADDR_expected_prev[0];
	end
	if (
		( ROM_ADDR_expected_prev[1] !== 1'bx ) && ( ROM_ADDR_prev[1] !== ROM_ADDR_expected_prev[1] )
		&& ((ROM_ADDR_expected_prev[1] !== last_ROM_ADDR_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[1] = ROM_ADDR_expected_prev[1];
	end
	if (
		( ROM_ADDR_expected_prev[2] !== 1'bx ) && ( ROM_ADDR_prev[2] !== ROM_ADDR_expected_prev[2] )
		&& ((ROM_ADDR_expected_prev[2] !== last_ROM_ADDR_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[2] = ROM_ADDR_expected_prev[2];
	end
	if (
		( ROM_ADDR_expected_prev[3] !== 1'bx ) && ( ROM_ADDR_prev[3] !== ROM_ADDR_expected_prev[3] )
		&& ((ROM_ADDR_expected_prev[3] !== last_ROM_ADDR_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[3] = ROM_ADDR_expected_prev[3];
	end
	if (
		( ROM_ADDR_expected_prev[4] !== 1'bx ) && ( ROM_ADDR_prev[4] !== ROM_ADDR_expected_prev[4] )
		&& ((ROM_ADDR_expected_prev[4] !== last_ROM_ADDR_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[4] = ROM_ADDR_expected_prev[4];
	end
	if (
		( ROM_ADDR_expected_prev[5] !== 1'bx ) && ( ROM_ADDR_prev[5] !== ROM_ADDR_expected_prev[5] )
		&& ((ROM_ADDR_expected_prev[5] !== last_ROM_ADDR_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[5] = ROM_ADDR_expected_prev[5];
	end
	if (
		( ROM_ADDR_expected_prev[6] !== 1'bx ) && ( ROM_ADDR_prev[6] !== ROM_ADDR_expected_prev[6] )
		&& ((ROM_ADDR_expected_prev[6] !== last_ROM_ADDR_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[6] = ROM_ADDR_expected_prev[6];
	end
	if (
		( ROM_ADDR_expected_prev[7] !== 1'bx ) && ( ROM_ADDR_prev[7] !== ROM_ADDR_expected_prev[7] )
		&& ((ROM_ADDR_expected_prev[7] !== last_ROM_ADDR_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_ADDR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_ADDR_expected_prev);
		$display ("     Real value = %b", ROM_ADDR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_ROM_ADDR_exp[7] = ROM_ADDR_expected_prev[7];
	end
	if (
		( ROM_CLK_expected_prev !== 1'bx ) && ( ROM_CLK_prev !== ROM_CLK_expected_prev )
		&& ((ROM_CLK_expected_prev !== last_ROM_CLK_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_CLK_expected_prev);
		$display ("     Real value = %b", ROM_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ROM_CLK_exp = ROM_CLK_expected_prev;
	end
	if (
		( ROM_Q_expected_prev[0] !== 1'bx ) && ( ROM_Q_prev[0] !== ROM_Q_expected_prev[0] )
		&& ((ROM_Q_expected_prev[0] !== last_ROM_Q_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[0] = ROM_Q_expected_prev[0];
	end
	if (
		( ROM_Q_expected_prev[1] !== 1'bx ) && ( ROM_Q_prev[1] !== ROM_Q_expected_prev[1] )
		&& ((ROM_Q_expected_prev[1] !== last_ROM_Q_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[1] = ROM_Q_expected_prev[1];
	end
	if (
		( ROM_Q_expected_prev[2] !== 1'bx ) && ( ROM_Q_prev[2] !== ROM_Q_expected_prev[2] )
		&& ((ROM_Q_expected_prev[2] !== last_ROM_Q_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[2] = ROM_Q_expected_prev[2];
	end
	if (
		( ROM_Q_expected_prev[3] !== 1'bx ) && ( ROM_Q_prev[3] !== ROM_Q_expected_prev[3] )
		&& ((ROM_Q_expected_prev[3] !== last_ROM_Q_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[3] = ROM_Q_expected_prev[3];
	end
	if (
		( ROM_Q_expected_prev[4] !== 1'bx ) && ( ROM_Q_prev[4] !== ROM_Q_expected_prev[4] )
		&& ((ROM_Q_expected_prev[4] !== last_ROM_Q_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[4] = ROM_Q_expected_prev[4];
	end
	if (
		( ROM_Q_expected_prev[5] !== 1'bx ) && ( ROM_Q_prev[5] !== ROM_Q_expected_prev[5] )
		&& ((ROM_Q_expected_prev[5] !== last_ROM_Q_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[5] = ROM_Q_expected_prev[5];
	end
	if (
		( ROM_Q_expected_prev[6] !== 1'bx ) && ( ROM_Q_prev[6] !== ROM_Q_expected_prev[6] )
		&& ((ROM_Q_expected_prev[6] !== last_ROM_Q_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[6] = ROM_Q_expected_prev[6];
	end
	if (
		( ROM_Q_expected_prev[7] !== 1'bx ) && ( ROM_Q_prev[7] !== ROM_Q_expected_prev[7] )
		&& ((ROM_Q_expected_prev[7] !== last_ROM_Q_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[7] = ROM_Q_expected_prev[7];
	end
	if (
		( ROM_Q_expected_prev[8] !== 1'bx ) && ( ROM_Q_prev[8] !== ROM_Q_expected_prev[8] )
		&& ((ROM_Q_expected_prev[8] !== last_ROM_Q_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[8] = ROM_Q_expected_prev[8];
	end
	if (
		( ROM_Q_expected_prev[9] !== 1'bx ) && ( ROM_Q_prev[9] !== ROM_Q_expected_prev[9] )
		&& ((ROM_Q_expected_prev[9] !== last_ROM_Q_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[9] = ROM_Q_expected_prev[9];
	end
	if (
		( ROM_Q_expected_prev[10] !== 1'bx ) && ( ROM_Q_prev[10] !== ROM_Q_expected_prev[10] )
		&& ((ROM_Q_expected_prev[10] !== last_ROM_Q_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[10] = ROM_Q_expected_prev[10];
	end
	if (
		( ROM_Q_expected_prev[11] !== 1'bx ) && ( ROM_Q_prev[11] !== ROM_Q_expected_prev[11] )
		&& ((ROM_Q_expected_prev[11] !== last_ROM_Q_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[11] = ROM_Q_expected_prev[11];
	end
	if (
		( ROM_Q_expected_prev[12] !== 1'bx ) && ( ROM_Q_prev[12] !== ROM_Q_expected_prev[12] )
		&& ((ROM_Q_expected_prev[12] !== last_ROM_Q_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[12] = ROM_Q_expected_prev[12];
	end
	if (
		( ROM_Q_expected_prev[13] !== 1'bx ) && ( ROM_Q_prev[13] !== ROM_Q_expected_prev[13] )
		&& ((ROM_Q_expected_prev[13] !== last_ROM_Q_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[13] = ROM_Q_expected_prev[13];
	end
	if (
		( ROM_Q_expected_prev[14] !== 1'bx ) && ( ROM_Q_prev[14] !== ROM_Q_expected_prev[14] )
		&& ((ROM_Q_expected_prev[14] !== last_ROM_Q_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[14] = ROM_Q_expected_prev[14];
	end
	if (
		( ROM_Q_expected_prev[15] !== 1'bx ) && ( ROM_Q_prev[15] !== ROM_Q_expected_prev[15] )
		&& ((ROM_Q_expected_prev[15] !== last_ROM_Q_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[15] = ROM_Q_expected_prev[15];
	end
	if (
		( ROM_Q_expected_prev[16] !== 1'bx ) && ( ROM_Q_prev[16] !== ROM_Q_expected_prev[16] )
		&& ((ROM_Q_expected_prev[16] !== last_ROM_Q_exp[16]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[16] = ROM_Q_expected_prev[16];
	end
	if (
		( ROM_Q_expected_prev[17] !== 1'bx ) && ( ROM_Q_prev[17] !== ROM_Q_expected_prev[17] )
		&& ((ROM_Q_expected_prev[17] !== last_ROM_Q_exp[17]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[17] = ROM_Q_expected_prev[17];
	end
	if (
		( ROM_Q_expected_prev[18] !== 1'bx ) && ( ROM_Q_prev[18] !== ROM_Q_expected_prev[18] )
		&& ((ROM_Q_expected_prev[18] !== last_ROM_Q_exp[18]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[18] = ROM_Q_expected_prev[18];
	end
	if (
		( ROM_Q_expected_prev[19] !== 1'bx ) && ( ROM_Q_prev[19] !== ROM_Q_expected_prev[19] )
		&& ((ROM_Q_expected_prev[19] !== last_ROM_Q_exp[19]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[19] = ROM_Q_expected_prev[19];
	end
	if (
		( ROM_Q_expected_prev[20] !== 1'bx ) && ( ROM_Q_prev[20] !== ROM_Q_expected_prev[20] )
		&& ((ROM_Q_expected_prev[20] !== last_ROM_Q_exp[20]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[20] = ROM_Q_expected_prev[20];
	end
	if (
		( ROM_Q_expected_prev[21] !== 1'bx ) && ( ROM_Q_prev[21] !== ROM_Q_expected_prev[21] )
		&& ((ROM_Q_expected_prev[21] !== last_ROM_Q_exp[21]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[21] = ROM_Q_expected_prev[21];
	end
	if (
		( ROM_Q_expected_prev[22] !== 1'bx ) && ( ROM_Q_prev[22] !== ROM_Q_expected_prev[22] )
		&& ((ROM_Q_expected_prev[22] !== last_ROM_Q_exp[22]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[22] = ROM_Q_expected_prev[22];
	end
	if (
		( ROM_Q_expected_prev[23] !== 1'bx ) && ( ROM_Q_prev[23] !== ROM_Q_expected_prev[23] )
		&& ((ROM_Q_expected_prev[23] !== last_ROM_Q_exp[23]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[23] = ROM_Q_expected_prev[23];
	end
	if (
		( ROM_Q_expected_prev[24] !== 1'bx ) && ( ROM_Q_prev[24] !== ROM_Q_expected_prev[24] )
		&& ((ROM_Q_expected_prev[24] !== last_ROM_Q_exp[24]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[24] = ROM_Q_expected_prev[24];
	end
	if (
		( ROM_Q_expected_prev[25] !== 1'bx ) && ( ROM_Q_prev[25] !== ROM_Q_expected_prev[25] )
		&& ((ROM_Q_expected_prev[25] !== last_ROM_Q_exp[25]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[25] = ROM_Q_expected_prev[25];
	end
	if (
		( ROM_Q_expected_prev[26] !== 1'bx ) && ( ROM_Q_prev[26] !== ROM_Q_expected_prev[26] )
		&& ((ROM_Q_expected_prev[26] !== last_ROM_Q_exp[26]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[26] = ROM_Q_expected_prev[26];
	end
	if (
		( ROM_Q_expected_prev[27] !== 1'bx ) && ( ROM_Q_prev[27] !== ROM_Q_expected_prev[27] )
		&& ((ROM_Q_expected_prev[27] !== last_ROM_Q_exp[27]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[27] = ROM_Q_expected_prev[27];
	end
	if (
		( ROM_Q_expected_prev[28] !== 1'bx ) && ( ROM_Q_prev[28] !== ROM_Q_expected_prev[28] )
		&& ((ROM_Q_expected_prev[28] !== last_ROM_Q_exp[28]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[28] = ROM_Q_expected_prev[28];
	end
	if (
		( ROM_Q_expected_prev[29] !== 1'bx ) && ( ROM_Q_prev[29] !== ROM_Q_expected_prev[29] )
		&& ((ROM_Q_expected_prev[29] !== last_ROM_Q_exp[29]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[29] = ROM_Q_expected_prev[29];
	end
	if (
		( ROM_Q_expected_prev[30] !== 1'bx ) && ( ROM_Q_prev[30] !== ROM_Q_expected_prev[30] )
		&& ((ROM_Q_expected_prev[30] !== last_ROM_Q_exp[30]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[30] = ROM_Q_expected_prev[30];
	end
	if (
		( ROM_Q_expected_prev[31] !== 1'bx ) && ( ROM_Q_prev[31] !== ROM_Q_expected_prev[31] )
		&& ((ROM_Q_expected_prev[31] !== last_ROM_Q_exp[31]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ROM_Q[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ROM_Q_expected_prev);
		$display ("     Real value = %b", ROM_Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_ROM_Q_exp[31] = ROM_Q_expected_prev[31];
	end
	if (
		( uPC_CLK_expected_prev !== 1'bx ) && ( uPC_CLK_prev !== uPC_CLK_expected_prev )
		&& ((uPC_CLK_expected_prev !== last_uPC_CLK_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPC_CLK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPC_CLK_expected_prev);
		$display ("     Real value = %b", uPC_CLK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_uPC_CLK_exp = uPC_CLK_expected_prev;
	end
	if (
		( YJP_expected_prev !== 1'bx ) && ( YJP_prev !== YJP_expected_prev )
		&& ((YJP_expected_prev !== last_YJP_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port YJP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", YJP_expected_prev);
		$display ("     Real value = %b", YJP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_YJP_exp = YJP_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module T3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C_clk;
reg CLR;
reg Open;
reg S_clk;
// wires                                               
wire flag;
wire MJP;
wire R_CLK;
wire [7:0] RAM_ADR;
wire RAM_CLK;
wire [7:0] RAM_DATA;
wire [7:0] RAM_OUT;
wire [7:0] ROM_ADDR;
wire ROM_CLK;
wire [31:0] ROM_Q;
wire uPC_CLK;
wire YJP;

wire sampler;                             

// assign statements (if any)                          
T3 i1 (
// port map - connection between master ports and signals/registers   
	.C_clk(C_clk),
	.CLR(CLR),
	.flag(flag),
	.MJP(MJP),
	.Open(Open),
	.R_CLK(R_CLK),
	.RAM_ADR(RAM_ADR),
	.RAM_CLK(RAM_CLK),
	.RAM_DATA(RAM_DATA),
	.RAM_OUT(RAM_OUT),
	.ROM_ADDR(ROM_ADDR),
	.ROM_CLK(ROM_CLK),
	.ROM_Q(ROM_Q),
	.S_clk(S_clk),
	.uPC_CLK(uPC_CLK),
	.YJP(YJP)
);

// Open
initial
begin
	Open = 1'b0;
	Open = #10000 1'b1;
end 

// CLR
initial
begin
	CLR = 1'b1;
end 

// S_clk
initial
begin
	S_clk = 1'b0;
	S_clk = #20000 1'b1;
end 

// C_clk
always
begin
	C_clk = 1'b0;
	C_clk = #5000 1'b1;
	#5000;
end 

T3_vlg_sample_tst tb_sample (
	.C_clk(C_clk),
	.CLR(CLR),
	.Open(Open),
	.S_clk(S_clk),
	.sampler_tx(sampler)
);

T3_vlg_check_tst tb_out(
	.flag(flag),
	.MJP(MJP),
	.R_CLK(R_CLK),
	.RAM_ADR(RAM_ADR),
	.RAM_CLK(RAM_CLK),
	.RAM_DATA(RAM_DATA),
	.RAM_OUT(RAM_OUT),
	.ROM_ADDR(ROM_ADDR),
	.ROM_CLK(ROM_CLK),
	.ROM_Q(ROM_Q),
	.uPC_CLK(uPC_CLK),
	.YJP(YJP),
	.sampler_rx(sampler)
);
endmodule

